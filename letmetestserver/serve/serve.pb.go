// Code generated by protoc-gen-gogo.
// source: serve.proto
// DO NOT EDIT!

/*
Package serve is a generated protocol buffer package.

It is generated from these files:
	serve.proto

It has these top-level messages:
	Allo
*/
package serve

import proto "github.com/gogo/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Allo struct {
	Name    string `protobuf:"bytes,1,opt,proto3" json:"Name,omitempty"`
	Age     int64  `protobuf:"varint,2,opt,proto3" json:"Age,omitempty"`
	Country string `protobuf:"bytes,3,opt,proto3" json:"Country,omitempty"`
	Spy     bool   `protobuf:"varint,4,opt,proto3" json:"Spy,omitempty"`
}

func (m *Allo) Reset()         { *m = Allo{} }
func (m *Allo) String() string { return proto.CompactTextString(m) }
func (*Allo) ProtoMessage()    {}

func init() {
}

// Client API for OnionSeller service

type OnionSellerClient interface {
	OnlyOnce(ctx context.Context, in *Allo, opts ...grpc.CallOption) (*Allo, error)
}

type onionSellerClient struct {
	cc *grpc.ClientConn
}

func NewOnionSellerClient(cc *grpc.ClientConn) OnionSellerClient {
	return &onionSellerClient{cc}
}

func (c *onionSellerClient) OnlyOnce(ctx context.Context, in *Allo, opts ...grpc.CallOption) (*Allo, error) {
	out := new(Allo)
	err := grpc.Invoke(ctx, "/serve.OnionSeller/OnlyOnce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OnionSeller service

type OnionSellerServer interface {
	OnlyOnce(context.Context, *Allo) (*Allo, error)
}

func RegisterOnionSellerServer(s *grpc.Server, srv OnionSellerServer) {
	s.RegisterService(&_OnionSeller_serviceDesc, srv)
}

func _OnionSeller_OnlyOnce_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(Allo)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(OnionSellerServer).OnlyOnce(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _OnionSeller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serve.OnionSeller",
	HandlerType: (*OnionSellerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlyOnce",
			Handler:    _OnionSeller_OnlyOnce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
